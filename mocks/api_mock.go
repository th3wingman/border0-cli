// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/borderzero/border0-cli/internal/api/models"
	mock "github.com/stretchr/testify/mock"
)

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

type API_Expecter struct {
	mock *mock.Mock
}

func (_m *API) EXPECT() *API_Expecter {
	return &API_Expecter{mock: &_m.Mock}
}

// AttachPolicies provides a mock function with given fields: ctx, socketID, policyUUIDs
func (_m *API) AttachPolicies(ctx context.Context, socketID string, policyUUIDs []string) ([]string, error) {
	ret := _m.Called(ctx, socketID, policyUUIDs)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) ([]string, error)); ok {
		return rf(ctx, socketID, policyUUIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []string); ok {
		r0 = rf(ctx, socketID, policyUUIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, socketID, policyUUIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_AttachPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachPolicies'
type API_AttachPolicies_Call struct {
	*mock.Call
}

// AttachPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - socketID string
//   - policyUUIDs []string
func (_e *API_Expecter) AttachPolicies(ctx interface{}, socketID interface{}, policyUUIDs interface{}) *API_AttachPolicies_Call {
	return &API_AttachPolicies_Call{Call: _e.mock.On("AttachPolicies", ctx, socketID, policyUUIDs)}
}

func (_c *API_AttachPolicies_Call) Run(run func(ctx context.Context, socketID string, policyUUIDs []string)) *API_AttachPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *API_AttachPolicies_Call) Return(_a0 []string, _a1 error) *API_AttachPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *API_AttachPolicies_Call) RunAndReturn(run func(context.Context, string, []string) ([]string, error)) *API_AttachPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSocket provides a mock function with given fields: ctx, socket
func (_m *API) CreateSocket(ctx context.Context, socket *models.Socket) (*models.Socket, error) {
	ret := _m.Called(ctx, socket)

	var r0 *models.Socket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Socket) (*models.Socket, error)); ok {
		return rf(ctx, socket)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Socket) *models.Socket); ok {
		r0 = rf(ctx, socket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Socket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Socket) error); ok {
		r1 = rf(ctx, socket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_CreateSocket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSocket'
type API_CreateSocket_Call struct {
	*mock.Call
}

// CreateSocket is a helper method to define mock.On call
//   - ctx context.Context
//   - socket *models.Socket
func (_e *API_Expecter) CreateSocket(ctx interface{}, socket interface{}) *API_CreateSocket_Call {
	return &API_CreateSocket_Call{Call: _e.mock.On("CreateSocket", ctx, socket)}
}

func (_c *API_CreateSocket_Call) Run(run func(ctx context.Context, socket *models.Socket)) *API_CreateSocket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Socket))
	})
	return _c
}

func (_c *API_CreateSocket_Call) Return(_a0 *models.Socket, _a1 error) *API_CreateSocket_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *API_CreateSocket_Call) RunAndReturn(run func(context.Context, *models.Socket) (*models.Socket, error)) *API_CreateSocket_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTunnel provides a mock function with given fields: ctx, socketID
func (_m *API) CreateTunnel(ctx context.Context, socketID string) (*models.Tunnel, error) {
	ret := _m.Called(ctx, socketID)

	var r0 *models.Tunnel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Tunnel, error)); ok {
		return rf(ctx, socketID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Tunnel); ok {
		r0 = rf(ctx, socketID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tunnel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, socketID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_CreateTunnel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTunnel'
type API_CreateTunnel_Call struct {
	*mock.Call
}

// CreateTunnel is a helper method to define mock.On call
//   - ctx context.Context
//   - socketID string
func (_e *API_Expecter) CreateTunnel(ctx interface{}, socketID interface{}) *API_CreateTunnel_Call {
	return &API_CreateTunnel_Call{Call: _e.mock.On("CreateTunnel", ctx, socketID)}
}

func (_c *API_CreateTunnel_Call) Run(run func(ctx context.Context, socketID string)) *API_CreateTunnel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *API_CreateTunnel_Call) Return(_a0 *models.Tunnel, _a1 error) *API_CreateTunnel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *API_CreateTunnel_Call) RunAndReturn(run func(context.Context, string) (*models.Tunnel, error)) *API_CreateTunnel_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSocket provides a mock function with given fields: ctx, socketID
func (_m *API) DeleteSocket(ctx context.Context, socketID string) error {
	ret := _m.Called(ctx, socketID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, socketID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// API_DeleteSocket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSocket'
type API_DeleteSocket_Call struct {
	*mock.Call
}

// DeleteSocket is a helper method to define mock.On call
//   - ctx context.Context
//   - socketID string
func (_e *API_Expecter) DeleteSocket(ctx interface{}, socketID interface{}) *API_DeleteSocket_Call {
	return &API_DeleteSocket_Call{Call: _e.mock.On("DeleteSocket", ctx, socketID)}
}

func (_c *API_DeleteSocket_Call) Run(run func(ctx context.Context, socketID string)) *API_DeleteSocket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *API_DeleteSocket_Call) Return(_a0 error) *API_DeleteSocket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *API_DeleteSocket_Call) RunAndReturn(run func(context.Context, string) error) *API_DeleteSocket_Call {
	_c.Call.Return(run)
	return _c
}

// DetachPolicies provides a mock function with given fields: ctx, socketID, policyUUIDs
func (_m *API) DetachPolicies(ctx context.Context, socketID string, policyUUIDs []string) ([]string, error) {
	ret := _m.Called(ctx, socketID, policyUUIDs)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) ([]string, error)); ok {
		return rf(ctx, socketID, policyUUIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []string); ok {
		r0 = rf(ctx, socketID, policyUUIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, socketID, policyUUIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_DetachPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachPolicies'
type API_DetachPolicies_Call struct {
	*mock.Call
}

// DetachPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - socketID string
//   - policyUUIDs []string
func (_e *API_Expecter) DetachPolicies(ctx interface{}, socketID interface{}, policyUUIDs interface{}) *API_DetachPolicies_Call {
	return &API_DetachPolicies_Call{Call: _e.mock.On("DetachPolicies", ctx, socketID, policyUUIDs)}
}

func (_c *API_DetachPolicies_Call) Run(run func(ctx context.Context, socketID string, policyUUIDs []string)) *API_DetachPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *API_DetachPolicies_Call) Return(_a0 []string, _a1 error) *API_DetachPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *API_DetachPolicies_Call) RunAndReturn(run func(context.Context, string, []string) ([]string, error)) *API_DetachPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// Evaluate provides a mock function with given fields: ctx, socket, clientIP, userEmail, sessionKey
func (_m *API) Evaluate(ctx context.Context, socket *models.Socket, clientIP string, userEmail string, sessionKey string) ([]string, map[string][]string, error) {
	ret := _m.Called(ctx, socket, clientIP, userEmail, sessionKey)

	var r0 []string
	var r1 map[string][]string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Socket, string, string, string) ([]string, map[string][]string, error)); ok {
		return rf(ctx, socket, clientIP, userEmail, sessionKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Socket, string, string, string) []string); ok {
		r0 = rf(ctx, socket, clientIP, userEmail, sessionKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Socket, string, string, string) map[string][]string); ok {
		r1 = rf(ctx, socket, clientIP, userEmail, sessionKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string][]string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *models.Socket, string, string, string) error); ok {
		r2 = rf(ctx, socket, clientIP, userEmail, sessionKey)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// API_Evaluate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Evaluate'
type API_Evaluate_Call struct {
	*mock.Call
}

// Evaluate is a helper method to define mock.On call
//   - ctx context.Context
//   - socket *models.Socket
//   - clientIP string
//   - userEmail string
//   - sessionKey string
func (_e *API_Expecter) Evaluate(ctx interface{}, socket interface{}, clientIP interface{}, userEmail interface{}, sessionKey interface{}) *API_Evaluate_Call {
	return &API_Evaluate_Call{Call: _e.mock.On("Evaluate", ctx, socket, clientIP, userEmail, sessionKey)}
}

func (_c *API_Evaluate_Call) Run(run func(ctx context.Context, socket *models.Socket, clientIP string, userEmail string, sessionKey string)) *API_Evaluate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Socket), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *API_Evaluate_Call) Return(allowedActions []string, info map[string][]string, err error) *API_Evaluate_Call {
	_c.Call.Return(allowedActions, info, err)
	return _c
}

func (_c *API_Evaluate_Call) RunAndReturn(run func(context.Context, *models.Socket, string, string, string) ([]string, map[string][]string, error)) *API_Evaluate_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessToken provides a mock function with given fields:
func (_m *API) GetAccessToken() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// API_GetAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessToken'
type API_GetAccessToken_Call struct {
	*mock.Call
}

// GetAccessToken is a helper method to define mock.On call
func (_e *API_Expecter) GetAccessToken() *API_GetAccessToken_Call {
	return &API_GetAccessToken_Call{Call: _e.mock.On("GetAccessToken")}
}

func (_c *API_GetAccessToken_Call) Run(run func()) *API_GetAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *API_GetAccessToken_Call) Return(_a0 string) *API_GetAccessToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *API_GetAccessToken_Call) RunAndReturn(run func() string) *API_GetAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationInfo provides a mock function with given fields: ctx
func (_m *API) GetOrganizationInfo(ctx context.Context) (*models.Organization, error) {
	ret := _m.Called(ctx)

	var r0 *models.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.Organization, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.Organization); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_GetOrganizationInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationInfo'
type API_GetOrganizationInfo_Call struct {
	*mock.Call
}

// GetOrganizationInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *API_Expecter) GetOrganizationInfo(ctx interface{}) *API_GetOrganizationInfo_Call {
	return &API_GetOrganizationInfo_Call{Call: _e.mock.On("GetOrganizationInfo", ctx)}
}

func (_c *API_GetOrganizationInfo_Call) Run(run func(ctx context.Context)) *API_GetOrganizationInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *API_GetOrganizationInfo_Call) Return(_a0 *models.Organization, _a1 error) *API_GetOrganizationInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *API_GetOrganizationInfo_Call) RunAndReturn(run func(context.Context) (*models.Organization, error)) *API_GetOrganizationInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetPoliciesBySocketID provides a mock function with given fields: socketID
func (_m *API) GetPoliciesBySocketID(socketID string) ([]models.Policy, error) {
	ret := _m.Called(socketID)

	var r0 []models.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Policy, error)); ok {
		return rf(socketID)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Policy); ok {
		r0 = rf(socketID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(socketID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_GetPoliciesBySocketID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPoliciesBySocketID'
type API_GetPoliciesBySocketID_Call struct {
	*mock.Call
}

// GetPoliciesBySocketID is a helper method to define mock.On call
//   - socketID string
func (_e *API_Expecter) GetPoliciesBySocketID(socketID interface{}) *API_GetPoliciesBySocketID_Call {
	return &API_GetPoliciesBySocketID_Call{Call: _e.mock.On("GetPoliciesBySocketID", socketID)}
}

func (_c *API_GetPoliciesBySocketID_Call) Run(run func(socketID string)) *API_GetPoliciesBySocketID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *API_GetPoliciesBySocketID_Call) Return(_a0 []models.Policy, _a1 error) *API_GetPoliciesBySocketID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *API_GetPoliciesBySocketID_Call) RunAndReturn(run func(string) ([]models.Policy, error)) *API_GetPoliciesBySocketID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyByName provides a mock function with given fields: ctx, name
func (_m *API) GetPolicyByName(ctx context.Context, name string) (*models.Policy, error) {
	ret := _m.Called(ctx, name)

	var r0 *models.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Policy, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Policy); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_GetPolicyByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyByName'
type API_GetPolicyByName_Call struct {
	*mock.Call
}

// GetPolicyByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *API_Expecter) GetPolicyByName(ctx interface{}, name interface{}) *API_GetPolicyByName_Call {
	return &API_GetPolicyByName_Call{Call: _e.mock.On("GetPolicyByName", ctx, name)}
}

func (_c *API_GetPolicyByName_Call) Run(run func(ctx context.Context, name string)) *API_GetPolicyByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *API_GetPolicyByName_Call) Return(_a0 *models.Policy, _a1 error) *API_GetPolicyByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *API_GetPolicyByName_Call) RunAndReturn(run func(context.Context, string) (*models.Policy, error)) *API_GetPolicyByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetSocket provides a mock function with given fields: ctx, socketID
func (_m *API) GetSocket(ctx context.Context, socketID string) (*models.Socket, error) {
	ret := _m.Called(ctx, socketID)

	var r0 *models.Socket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Socket, error)); ok {
		return rf(ctx, socketID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Socket); ok {
		r0 = rf(ctx, socketID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Socket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, socketID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_GetSocket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSocket'
type API_GetSocket_Call struct {
	*mock.Call
}

// GetSocket is a helper method to define mock.On call
//   - ctx context.Context
//   - socketID string
func (_e *API_Expecter) GetSocket(ctx interface{}, socketID interface{}) *API_GetSocket_Call {
	return &API_GetSocket_Call{Call: _e.mock.On("GetSocket", ctx, socketID)}
}

func (_c *API_GetSocket_Call) Run(run func(ctx context.Context, socketID string)) *API_GetSocket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *API_GetSocket_Call) Return(_a0 *models.Socket, _a1 error) *API_GetSocket_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *API_GetSocket_Call) RunAndReturn(run func(context.Context, string) (*models.Socket, error)) *API_GetSocket_Call {
	_c.Call.Return(run)
	return _c
}

// GetSockets provides a mock function with given fields: ctx
func (_m *API) GetSockets(ctx context.Context) ([]models.Socket, error) {
	ret := _m.Called(ctx)

	var r0 []models.Socket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Socket, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Socket); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Socket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_GetSockets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSockets'
type API_GetSockets_Call struct {
	*mock.Call
}

// GetSockets is a helper method to define mock.On call
//   - ctx context.Context
func (_e *API_Expecter) GetSockets(ctx interface{}) *API_GetSockets_Call {
	return &API_GetSockets_Call{Call: _e.mock.On("GetSockets", ctx)}
}

func (_c *API_GetSockets_Call) Run(run func(ctx context.Context)) *API_GetSockets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *API_GetSockets_Call) Return(_a0 []models.Socket, _a1 error) *API_GetSockets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *API_GetSockets_Call) RunAndReturn(run func(context.Context) ([]models.Socket, error)) *API_GetSockets_Call {
	_c.Call.Return(run)
	return _c
}

// GetTunnel provides a mock function with given fields: ctx, socketID, tunnelID
func (_m *API) GetTunnel(ctx context.Context, socketID string, tunnelID string) (*models.Tunnel, error) {
	ret := _m.Called(ctx, socketID, tunnelID)

	var r0 *models.Tunnel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Tunnel, error)); ok {
		return rf(ctx, socketID, tunnelID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Tunnel); ok {
		r0 = rf(ctx, socketID, tunnelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tunnel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, socketID, tunnelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_GetTunnel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTunnel'
type API_GetTunnel_Call struct {
	*mock.Call
}

// GetTunnel is a helper method to define mock.On call
//   - ctx context.Context
//   - socketID string
//   - tunnelID string
func (_e *API_Expecter) GetTunnel(ctx interface{}, socketID interface{}, tunnelID interface{}) *API_GetTunnel_Call {
	return &API_GetTunnel_Call{Call: _e.mock.On("GetTunnel", ctx, socketID, tunnelID)}
}

func (_c *API_GetTunnel_Call) Run(run func(ctx context.Context, socketID string, tunnelID string)) *API_GetTunnel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *API_GetTunnel_Call) Return(_a0 *models.Tunnel, _a1 error) *API_GetTunnel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *API_GetTunnel_Call) RunAndReturn(run func(context.Context, string, string) (*models.Tunnel, error)) *API_GetTunnel_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserID provides a mock function with given fields:
func (_m *API) GetUserID() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_GetUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserID'
type API_GetUserID_Call struct {
	*mock.Call
}

// GetUserID is a helper method to define mock.On call
func (_e *API_Expecter) GetUserID() *API_GetUserID_Call {
	return &API_GetUserID_Call{Call: _e.mock.On("GetUserID")}
}

func (_c *API_GetUserID_Call) Run(run func()) *API_GetUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *API_GetUserID_Call) Return(_a0 string, _a1 error) *API_GetUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *API_GetUserID_Call) RunAndReturn(run func() (string, error)) *API_GetUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: email, password
func (_m *API) Login(email string, password string) (*models.LoginResponse, error) {
	ret := _m.Called(email, password)

	var r0 *models.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.LoginResponse, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.LoginResponse); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type API_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - email string
//   - password string
func (_e *API_Expecter) Login(email interface{}, password interface{}) *API_Login_Call {
	return &API_Login_Call{Call: _e.mock.On("Login", email, password)}
}

func (_c *API_Login_Call) Run(run func(email string, password string)) *API_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *API_Login_Call) Return(_a0 *models.LoginResponse, _a1 error) *API_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *API_Login_Call) RunAndReturn(run func(string, string) (*models.LoginResponse, error)) *API_Login_Call {
	_c.Call.Return(run)
	return _c
}

// ServerOrgCertificate provides a mock function with given fields: ctx, name, csr
func (_m *API) ServerOrgCertificate(ctx context.Context, name string, csr []byte) ([]byte, error) {
	ret := _m.Called(ctx, name, csr)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) ([]byte, error)); ok {
		return rf(ctx, name, csr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) []byte); ok {
		r0 = rf(ctx, name, csr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, name, csr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_ServerOrgCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerOrgCertificate'
type API_ServerOrgCertificate_Call struct {
	*mock.Call
}

// ServerOrgCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - csr []byte
func (_e *API_Expecter) ServerOrgCertificate(ctx interface{}, name interface{}, csr interface{}) *API_ServerOrgCertificate_Call {
	return &API_ServerOrgCertificate_Call{Call: _e.mock.On("ServerOrgCertificate", ctx, name, csr)}
}

func (_c *API_ServerOrgCertificate_Call) Run(run func(ctx context.Context, name string, csr []byte)) *API_ServerOrgCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *API_ServerOrgCertificate_Call) Return(_a0 []byte, _a1 error) *API_ServerOrgCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *API_ServerOrgCertificate_Call) RunAndReturn(run func(context.Context, string, []byte) ([]byte, error)) *API_ServerOrgCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// SignSSHKey provides a mock function with given fields: ctx, socketID, key
func (_m *API) SignSSHKey(ctx context.Context, socketID string, key []byte) (string, string, error) {
	ret := _m.Called(ctx, socketID, key)

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (string, string, error)); ok {
		return rf(ctx, socketID, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) string); ok {
		r0 = rf(ctx, socketID, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) string); ok {
		r1 = rf(ctx, socketID, key)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, []byte) error); ok {
		r2 = rf(ctx, socketID, key)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// API_SignSSHKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignSSHKey'
type API_SignSSHKey_Call struct {
	*mock.Call
}

// SignSSHKey is a helper method to define mock.On call
//   - ctx context.Context
//   - socketID string
//   - key []byte
func (_e *API_Expecter) SignSSHKey(ctx interface{}, socketID interface{}, key interface{}) *API_SignSSHKey_Call {
	return &API_SignSSHKey_Call{Call: _e.mock.On("SignSSHKey", ctx, socketID, key)}
}

func (_c *API_SignSSHKey_Call) Run(run func(ctx context.Context, socketID string, key []byte)) *API_SignSSHKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *API_SignSSHKey_Call) Return(_a0 string, _a1 string, _a2 error) *API_SignSSHKey_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *API_SignSSHKey_Call) RunAndReturn(run func(context.Context, string, []byte) (string, string, error)) *API_SignSSHKey_Call {
	_c.Call.Return(run)
	return _c
}

// SignSshOrgCertificate provides a mock function with given fields: ctx, socketID, sessionID, userEmail, ticket, publicKey
func (_m *API) SignSshOrgCertificate(ctx context.Context, socketID string, sessionID string, userEmail string, ticket []byte, publicKey []byte) ([]byte, error) {
	ret := _m.Called(ctx, socketID, sessionID, userEmail, ticket, publicKey)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []byte, []byte) ([]byte, error)); ok {
		return rf(ctx, socketID, sessionID, userEmail, ticket, publicKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []byte, []byte) []byte); ok {
		r0 = rf(ctx, socketID, sessionID, userEmail, ticket, publicKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []byte, []byte) error); ok {
		r1 = rf(ctx, socketID, sessionID, userEmail, ticket, publicKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// API_SignSshOrgCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignSshOrgCertificate'
type API_SignSshOrgCertificate_Call struct {
	*mock.Call
}

// SignSshOrgCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - socketID string
//   - sessionID string
//   - userEmail string
//   - ticket []byte
//   - publicKey []byte
func (_e *API_Expecter) SignSshOrgCertificate(ctx interface{}, socketID interface{}, sessionID interface{}, userEmail interface{}, ticket interface{}, publicKey interface{}) *API_SignSshOrgCertificate_Call {
	return &API_SignSshOrgCertificate_Call{Call: _e.mock.On("SignSshOrgCertificate", ctx, socketID, sessionID, userEmail, ticket, publicKey)}
}

func (_c *API_SignSshOrgCertificate_Call) Run(run func(ctx context.Context, socketID string, sessionID string, userEmail string, ticket []byte, publicKey []byte)) *API_SignSshOrgCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]byte), args[5].([]byte))
	})
	return _c
}

func (_c *API_SignSshOrgCertificate_Call) Return(_a0 []byte, _a1 error) *API_SignSshOrgCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *API_SignSshOrgCertificate_Call) RunAndReturn(run func(context.Context, string, string, string, []byte, []byte) ([]byte, error)) *API_SignSshOrgCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// StartRefreshAccessTokenJob provides a mock function with given fields: ctx
func (_m *API) StartRefreshAccessTokenJob(ctx context.Context) {
	_m.Called(ctx)
}

// API_StartRefreshAccessTokenJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartRefreshAccessTokenJob'
type API_StartRefreshAccessTokenJob_Call struct {
	*mock.Call
}

// StartRefreshAccessTokenJob is a helper method to define mock.On call
//   - ctx context.Context
func (_e *API_Expecter) StartRefreshAccessTokenJob(ctx interface{}) *API_StartRefreshAccessTokenJob_Call {
	return &API_StartRefreshAccessTokenJob_Call{Call: _e.mock.On("StartRefreshAccessTokenJob", ctx)}
}

func (_c *API_StartRefreshAccessTokenJob_Call) Run(run func(ctx context.Context)) *API_StartRefreshAccessTokenJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *API_StartRefreshAccessTokenJob_Call) Return() *API_StartRefreshAccessTokenJob_Call {
	_c.Call.Return()
	return _c
}

func (_c *API_StartRefreshAccessTokenJob_Call) RunAndReturn(run func(context.Context)) *API_StartRefreshAccessTokenJob_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSession provides a mock function with given fields: update
func (_m *API) UpdateSession(update models.SessionUpdate) error {
	ret := _m.Called(update)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.SessionUpdate) error); ok {
		r0 = rf(update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// API_UpdateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSession'
type API_UpdateSession_Call struct {
	*mock.Call
}

// UpdateSession is a helper method to define mock.On call
//   - update models.SessionUpdate
func (_e *API_Expecter) UpdateSession(update interface{}) *API_UpdateSession_Call {
	return &API_UpdateSession_Call{Call: _e.mock.On("UpdateSession", update)}
}

func (_c *API_UpdateSession_Call) Run(run func(update models.SessionUpdate)) *API_UpdateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.SessionUpdate))
	})
	return _c
}

func (_c *API_UpdateSession_Call) Return(_a0 error) *API_UpdateSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *API_UpdateSession_Call) RunAndReturn(run func(models.SessionUpdate) error) *API_UpdateSession_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSocket provides a mock function with given fields: ctx, socketID, socket
func (_m *API) UpdateSocket(ctx context.Context, socketID string, socket models.Socket) error {
	ret := _m.Called(ctx, socketID, socket)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Socket) error); ok {
		r0 = rf(ctx, socketID, socket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// API_UpdateSocket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSocket'
type API_UpdateSocket_Call struct {
	*mock.Call
}

// UpdateSocket is a helper method to define mock.On call
//   - ctx context.Context
//   - socketID string
//   - socket models.Socket
func (_e *API_Expecter) UpdateSocket(ctx interface{}, socketID interface{}, socket interface{}) *API_UpdateSocket_Call {
	return &API_UpdateSocket_Call{Call: _e.mock.On("UpdateSocket", ctx, socketID, socket)}
}

func (_c *API_UpdateSocket_Call) Run(run func(ctx context.Context, socketID string, socket models.Socket)) *API_UpdateSocket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(models.Socket))
	})
	return _c
}

func (_c *API_UpdateSocket_Call) Return(_a0 error) *API_UpdateSocket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *API_UpdateSocket_Call) RunAndReturn(run func(context.Context, string, models.Socket) error) *API_UpdateSocket_Call {
	_c.Call.Return(run)
	return _c
}

// UploadRecording provides a mock function with given fields: content, socketID, sessionKey, recordingID
func (_m *API) UploadRecording(content []byte, socketID string, sessionKey string, recordingID string) error {
	ret := _m.Called(content, socketID, sessionKey, recordingID)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, string, string, string) error); ok {
		r0 = rf(content, socketID, sessionKey, recordingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// API_UploadRecording_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadRecording'
type API_UploadRecording_Call struct {
	*mock.Call
}

// UploadRecording is a helper method to define mock.On call
//   - content []byte
//   - socketID string
//   - sessionKey string
//   - recordingID string
func (_e *API_Expecter) UploadRecording(content interface{}, socketID interface{}, sessionKey interface{}, recordingID interface{}) *API_UploadRecording_Call {
	return &API_UploadRecording_Call{Call: _e.mock.On("UploadRecording", content, socketID, sessionKey, recordingID)}
}

func (_c *API_UploadRecording_Call) Run(run func(content []byte, socketID string, sessionKey string, recordingID string)) *API_UploadRecording_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *API_UploadRecording_Call) Return(_a0 error) *API_UploadRecording_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *API_UploadRecording_Call) RunAndReturn(run func([]byte, string, string, string) error) *API_UploadRecording_Call {
	_c.Call.Return(run)
	return _c
}

// NewAPI creates a new instance of API. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *API {
	mock := &API{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
